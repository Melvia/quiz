//import questions from "./questions";

const questions = [
  {
    question: "–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞?",
    answers: ["reduce", "map", "split", "filter"],
    correct: 1,
  },
  {
    question: "–ö–∞–∫–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ?",
    answers: [
      "Map –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π",
      "–°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ this –æ–∫—Ä—É–∂–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.",
      "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try..catch —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ",
      "–í—Å–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–≤–æ–π—Å—Ç–≤–æ prototype",
    ],
    correct: 3,
  },
  {
    question:
      "let text = 5 + null + 'lalala'; –ß–µ–º—É —Ä–∞–≤–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π text?",
    answers: ["ReferenceError", "NaN", "5nulllalala", "5lalala"],
    correct: 4,
  },
  {
    question: "let arr = [1, 2]; –ß—Ç–æ –≤–µ—Ä–Ω–µ—Ç console.log(...arr)?",
    answers: ["[1, 2]", "TypeError", "ReferenceError", "1 2"],
    correct: 4,
  },
];

//–≠–ª–µ–º–µ–Ω—Ç—ã
const headerContainer = document.querySelector("#header");
const listContainer = document.querySelector("#list");
const submitBtn = document.querySelector("#submit");

//–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
let score = 0;
let questionIndex = 0;

clearPage();
showQuestion();
submitBtn.onclick = checkAnswer;

function clearPage() {
  headerContainer.innerHTML = "";
  listContainer.innerHTML = "";
}

function showQuestion() {
  const title = `<h2 class="title">${questions[questionIndex]["question"]}</h2>`;

  headerContainer.innerHTML = title;

  for ([answerNumber, answerText] of questions[questionIndex][
    "answers"
  ].entries()) {
    const answerHTML = `<li>
		<label>
			<input value="${answerNumber + 1}" type="radio" class="answer" name="answer" />
			<span>${answerText}</span>
		</label>
	</li>`;

    listContainer.innerHTML += answerHTML;
  }
}

function checkAnswer() {
  const checkedRadio = listContainer.querySelector(
    'input[type="radio"]:checked'
  );
  if (!checkedRadio) {
    submitBtn.blur();
    return;
  }
  const userAnswer = parseInt(checkedRadio.value);

  if (userAnswer === questions[questionIndex]["correct"]) {
    score++;
  }

  if (questionIndex !== questions.length - 1) {
    questionIndex++;
    clearPage();
    showQuestion();
    return;
  } else {
    clearPage();
    showResults();
  }
}

function showResults() {
  console.log("showResults.started");

  let title, message;

  //titles and text variants
  if (score === questions.length) {
    title = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üèÜ";
    message = "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–µ—Ä–Ω–æ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! üòé üëç";
  } else if ((score * 100) / questions.length >= 50) {
    title = "–ù–µ–ø–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üòâ";
    message = "–í—ã –¥–∞–ª–∏ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤! üëç";
  } else {
    title = "–°—Ç–æ–∏—Ç –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è üòë";
    message = "–ü–æ–∫–∞ —É –≤–∞—Å –º–µ–Ω—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤! ";
  }

  //result
  result = `${score} –∏–∑ ${questions.length}`;

  const finalMessage = `<h2 class="title">${title}</h2>
	<h3 class="summary">${message}</h3>
	<p class="result">${result}</p>`;

  headerContainer.innerHTML = finalMessage;

  submitBtn.blur();

  submitBtn.innerText = "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ";
  submitBtn.onclick = () => history.go();
}
